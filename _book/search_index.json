[
["Con.html", "Figure 1 Schemes for intra- and inter-animal variation", " Figure 1 Schemes for intra- and inter-animal variation The goal is to generate schematic diagrams to illustrate the ideas to be tested by the analyses. First generate simulated data. Imagine a dataset describing individual cells using two quantifiable features (x and y). In this scenario different cell class could be separated using these features. Each cell class is modeled as having variance for each feature. The distribution of features of cell class A has a simple structure in which the variance is around a point. For cell class B the distribution of features is along a line. Cell classes C and D have a similar distribution to A, but are centered at different values of one or both features. numcells &lt;- 100 Cell_A &lt;- tibble(x = rnorm(numcells, 10, 1), y = rnorm(numcells, 12, 1), cell = &quot;A&quot;) Cell_B &lt;- tibble(x = runif(numcells, min = 20, max = 40) + rnorm(numcells,0,1), y = rnorm(numcells, 25, 2), cell = &quot;B&quot;) Cell_C &lt;- tibble(x = rnorm(numcells, 10, 2), y = rnorm(numcells, 35, 2), cell = &quot;C&quot;) Cell_D &lt;- tibble(x = rnorm(numcells, 30, 2), y = rnorm(numcells, 10, 2), cell = &quot;D&quot;) CellFeatures &lt;- bind_rows(Cell_A, Cell_B, Cell_C, Cell_D) Plot cell features using a colour blind friendly palette (from http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/). cbPalette &lt;- c(&quot;#E69F00&quot;, &quot;#D55E00&quot;, &quot;#56B4E9&quot;, &quot;#009E73&quot;) CF_plot &lt;- ggplot(CellFeatures, aes(x, y, colour = cell)) + geom_point() + xlim(0,45) + ylim(0,45) + labs(x = &quot;Feature 1&quot;, y = &quot;Feature 2&quot;, colour = &quot;Cell Type&quot;, title = &quot;Cell type separation&quot;) + scale_colour_manual(values=cbPalette) + theme_classic() + theme(legend.position = &quot;bottom&quot;, axis.ticks = element_blank(), axis.text = element_blank(), legend.text = element_blank()) CF_plot Focus on cell class B. First imagine how a distribution like the one above could be generated by pooling data from multiple animals in which the actual distribution is modular. Considered colour / intensity coding the points to reflect a functional variable, e.g. dorsoventral position in MEC. Would probaly add too much information. numcells &lt;- 20 MF_A &lt;- tibble(x = c(rnorm(numcells, 26, 0.5), rnorm(numcells, 31, 0.5), rnorm(numcells, 36, 0.5)), y = rnorm(numcells*3, 25, 2), animal = &quot;1&quot;) MF_B &lt;- tibble(x = c(rnorm(numcells, 28.5, 0.5), rnorm(numcells, 33.5, 0.5), rnorm(numcells, 38.5, 0.5)), y = rnorm(numcells*3, 25, 2), animal = &quot;2&quot;) ModularFeatures &lt;- rbind(MF_A, MF_B) MF_plot &lt;- ggplot(ModularFeatures, aes(x, y, colour = animal)) + geom_point() + xlim(20,45) + ylim(20,30) + xlab(&quot;Feature 1&quot;) + ylab(&quot;Feature 2&quot;) + theme_classic() + theme(axis.title.x=element_blank()) MF_plot ## Warning: Removed 1 rows containing missing values (geom_point). Next imagine a scenarion in which the distribution in D is continuous within an animal, but for which there are inter-animal differences in the mean of feature 2. numcells &lt;- 60 OOF_A &lt;- tibble(x = runif(numcells, min = 25, max = 40) + rnorm(numcells,0,1), y = rnorm(numcells, 23, 1), animal = &quot;1&quot;) OOF_B &lt;- tibble(x = runif(numcells, min = 25, max = 40) + rnorm(numcells,0,1), y = rnorm(numcells, 27, 1), animal = &quot;2&quot;) OrthogOffsetFeatures &lt;- rbind(OOF_A, OOF_B) OOF_plot &lt;- ggplot(OrthogOffsetFeatures, aes(x, y, colour = animal)) + geom_point() + xlim(20,45) + ylim(20,30) + xlab(&quot;Feature 1&quot;) + ylab(&quot;Feature 2&quot;) + theme_classic() OOF_plot Finally, imagine a scenario in which the distribution in D is continuous within an animal but the range across the variable feature differs between animals. numcells &lt;- 60 LOF_A &lt;- tibble(x = runif(numcells, min = 25, max = 35) + rnorm(numcells,0,1), y = rnorm(numcells, 25, 2), animal = &quot;1&quot;) LOF_B &lt;- tibble(x = runif(numcells, min = 30, max = 40) + rnorm(numcells,0,1), y = rnorm(numcells, 25, 2), animal = &quot;2&quot;) LinearOffsetFeatures &lt;- rbind(LOF_A, LOF_B) LOF_plot &lt;- ggplot(LinearOffsetFeatures, aes(x, y, colour = animal)) + geom_point() + xlim(20,45) + ylim(20,30) + xlab(&quot;Feature 1&quot;) + ylab(&quot;Feature 2&quot;) + theme_classic() LOF_plot Combine models for intra-animal variation and make plots using facets. ModularFeatures$scheme &lt;- &quot;modular&quot; OrthogOffsetFeatures$scheme &lt;- &quot;orthog&quot; LinearOffsetFeatures$scheme &lt;- &quot;linear&quot; IntraAnimal &lt;- bind_rows(ModularFeatures, OrthogOffsetFeatures, LinearOffsetFeatures) IntraAnimal$scheme &lt;- as.factor(IntraAnimal$scheme) IntraAnimal$scheme = factor(IntraAnimal$scheme, c(&quot;modular&quot;, &quot;orthog&quot;,&quot;linear&quot;)) labels_schemes &lt;- c(modular = &quot;Modular&quot;, orthog = &quot;Orthogonal&quot;, linear = &quot;Linear&quot;) IntraAnimalPlot &lt;- ggplot(IntraAnimal, aes(x, y, alpha = animal)) + geom_point(colour = cbPalette[2]) + xlim(20,45) + ylim(20,30) + labs(x = &quot;Feature 1&quot;, y = &quot;Feature 2&quot;, alpha = &quot;Animal&quot;, title = &quot;Within cell type variability&quot;) + facet_wrap(~scheme, nrow = 3, labeller = labeller(scheme = labels_schemes)) + theme_classic() + theme(strip.background = element_blank(), axis.ticks = element_blank(), axis.text = element_blank()) + scale_alpha_discrete(range=c(0.1,1)) + theme(legend.position = &quot;bottom&quot;, legend.text = element_blank()) IntraAnimalPlot ## Warning: Removed 1 rows containing missing values (geom_point). Plot all together. Blank columns are to allow white space for insertion of labels. ConceptFigure &lt;- grid.arrange(CF_plot, IntraAnimalPlot, ncol = 4, widths = c(0.1, 1, 0.1, 1.2), layout_matrix = rbind(c(NA, 1, NA, 2))) ## Warning: Removed 1 rows containing missing values (geom_point). ConceptFigure ## TableGrob (1 x 4) &quot;arrange&quot;: 2 grobs ## z cells name grob ## 1 1 (1-1,2-2) arrange gtable[layout] ## 2 2 (1-1,4-4) arrange gtable[layout] Save the figure. ggsave(&quot;Concept_figure.png&quot;, plot = ConceptFigure, width = 160, height = 100, units = &quot;mm&quot;) "]
]
